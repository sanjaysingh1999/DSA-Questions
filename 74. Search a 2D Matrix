Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

O(M+N)
Idea: AS rows ar asc order, check with last element of each row. if <target row++ else col--;

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
     int m=matrix.length,n=matrix[0].length;  
     int left=0,right=n-1;  
     while(left<m && right>=0){
         if(matrix[left][right]==target){return true;}
         else if(matrix[left][right]<target){left++;}
         else{right--;}
     }   
        return false;
    }
}

Optimal : Log(M*N)
Idea: do binary search for getting the correct row num then in that row do binary search to get key.
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
       int target_col = -1,start=0,end=matrix.length-1,n=matrix[0].length;
       while(start<=end){
        int mid = start + (end-start) /2 ;
        if(matrix[mid][0] == target || matrix[mid][n-1] == target){return true;}
        else if(matrix[mid][0] < target  && matrix[mid][n-1] > target){target_col=mid;break;}
        else if(matrix[mid][0] > target){ end = mid-1;}
        else{start=mid+1;}
       }
        start=0; end=n-1;
        while(start<=end && target_col!=-1){
            int mid  = start + (end-start) /2 ;
            if(matrix[target_col][mid] == target){return true;}
            else if(matrix[target_col][mid] < target) {start = mid+1;}
            else{end = mid-1;}
        }
        return false;
    }
}





========================== OLD Solution ============================================
Optimal (same as above optimal) : Log(M*N)
Idea: do binary search for getting the correct row num then in that row do binary search to get key.

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
     int m=matrix.length-1,n=matrix[0].length-1,mid=0;  
     int left=0,right=m; 
     while(left<=right){
         mid = (left+right)/2;
         if(matrix[mid][0]>target ){right=mid-1;}
         else if (matrix[mid][n]<target){left=mid+1;}
         else{break;}
     }
     int row=mid;left=0;right=n;
     while(left<=right ){
         mid=(left+right)/2;
         if(matrix[row][mid]==target){return true;}
         else if(matrix[row][mid]>target){right=mid-1;}
         else{left=mid+1;}
     }   
        return false;
    }
     
}
     

