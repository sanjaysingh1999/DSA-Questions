Q Link: https://leetcode.com/problems/valid-anagram/description/

Brute Force: Create 2 Hashmaps and calculte frequencies in each String, if it matches then anagram otherwise not. TC:O(n) SC:O(n)

class Solution {
    public boolean isAnagram(String s, String t) {
       if(s.length() != t.length()) return false;
       HashMap<Character,Integer> sFreq = new HashMap<>();
       HashMap<Character,Integer> tFreq = new HashMap<>();
       for(char c : s.toCharArray()){
            sFreq.put(c,sFreq.getOrDefault(c,0)+1);
       }
       for(char c: t.toCharArray()){
        tFreq.put(c,tFreq.getOrDefault(c,0)+1);
       }
       
       return tFreq.equals(sFreq);
    }
}

Optimal: Store freq in array with 26 size as we have only lowercase letters. At end check if array has all values as 0's. TC:O(n) SC:O(26) ~ O(1)

class Solution {
    public boolean isAnagram(String s, String t) {
       //(s.length() != t.length()) return false;
       int [] arr = new int[26];
       for(char c:s.toCharArray()){arr[c-'a']++;}
       for(char c:t.toCharArray()){arr[c-'a']--;}
       for(int count : arr){
        if(count!=0) return false;
       }
       return true;
    }
}
