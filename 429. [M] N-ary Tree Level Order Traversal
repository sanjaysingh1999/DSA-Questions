Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).
Example 1:

Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]
Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]

Idea: DO dfs but loop through childrens and add it into queue as nodes.
TC:O(V+E) SC:O(V)

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        if(root==null) return new ArrayList();
       ArrayDeque<Node> que = new ArrayDeque<>();
       que.add(root);
       List<List<Integer>> res = new ArrayList<>();
       while(!que.isEmpty()){
           int size = que.size(); 
           List<Integer> currNodes = new ArrayList<>();
           while(size>0){
               Node curr = que.poll(); currNodes.add(curr.val);
               List<Node> child = curr.children;
               for(Node childNode : child){que.add(childNode);}
               size--;
           }
           res.add(currNodes);
       }
       return res;
    }
}

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
