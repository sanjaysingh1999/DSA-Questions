Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]Idea: If cell = 0th index or last index of row then add 1 to list other wise add  prev_list (curr index -1) + prev_list (curr index) to arraylist.
TC:O(m*n) SC:O(mn) m= numRows n= cell in each row 

class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> arr = new ArrayList<>();
        for(int i=0;i<numRows;i++){
            ArrayList<Integer> temp = new ArrayList<>();
            for(int r=0;r<=i;r++){
                if(r==0 || r==i){temp.add(1);}
                else{
                    int val= arr.get(i-1).get(r-1) + arr.get(i-1).get(r);
                    temp.add(val);
                }
            }
                arr.add(temp);
        }
        return arr;
    }
}
