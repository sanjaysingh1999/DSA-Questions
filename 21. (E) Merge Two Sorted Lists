Desc Link: https://leetcode.com/problems/merge-two-sorted-lists/submissions/1466621457/

TC:O(n+m) SC:O(n+m)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode curr1 = list1, curr2 = list2, res=new ListNode(),head=res;
        while(curr1!=null && curr2!=null){
            if(curr1.val<=curr2.val){
                res.next= new ListNode(curr1.val);
                curr1=curr1.next;}
            else{
                res.next= new ListNode(curr2.val);
                curr2=curr2.next;}
            res=res.next;
        }
        res.next = curr1!=null ? curr1:curr2;
        return head.next;
    }
}

======================== Old Soln ==================================
Below soln modifies original LL but has TC:O(n+m) SC:O(1)
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode root = new ListNode();
        ListNode prev=root;
        while(list1!=null && list2!=null){
            if(list1.val>list2.val){
                prev.next=list2;list2=list2.next;
            }
            else{
                prev.next=list1;list1=list1.next;
            }
            prev=prev.next;
        }
        prev.next= list1!=null? list1:list2;
      return root.next;
    }
}
