There is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.
You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an integer array restricted which represents restricted nodes.

Return the maximum number of nodes you can reach from node 0 without visiting a restricted node.
Note that node 0 will not be a restricted node.

Example 1:
Input: n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]
Output: 4
Explanation: The diagram above shows the tree.
We have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node.

Idea: Do dfs and find all visited nodes. Stop dfs for restricted nodes & have them added in the visited set in the start itself.

TC:O(v*e) SC:O(v*e)
class Solution {
    public int reachableNodes(int n, int[][] edges, int[] restricted) {
        HashSet<Integer> visited = new HashSet<>();
        ArrayList<Integer> [] graph = new ArrayList [n];
        for(int node:restricted){visited.add(node);}
        for(int i=0;i<n;i++){graph[i] = new ArrayList<Integer>();}
        for(int []node:edges){
            int u=node[0],v=node[1];
            ArrayList<Integer> temp = graph[u]; temp.add(v);
            temp = graph[v]; temp.add(u);
        }
        visited.add(0);
        for(int node:graph[0]){
            if(!visited.contains(node)){
                dfs(graph,visited,node);
            }
        }
        return visited.size()-restricted.length;
    }
    public void dfs(ArrayList<Integer> [] graph,HashSet<Integer> visited,int node){
        if(visited.contains(node)){return;}
        visited.add(node);
        for(int n:graph[node]){
            dfs(graph,visited,n);
        }
    }
}
